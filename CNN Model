import numpy as np 
import matplotlib.pyplot as plt
import os
import cv2

DATADIR = "/Users/simransejwal/Desktop/Data Set"
CATEGORIES = ['Aardwolf','African Crake','Agile Wallaby','Baboon','Badger','Bald Eagle','Baleen Whale','Bat','Bear','Beaver','Bengal Vulture','Black Swan','Black Tailed Deer','Black Vulture','Blue Fox','Bonnet Macaque','California Sea Lion','Camel','Canada Gooose','Cape Clawless Otter','Cape Fox','Cape Raven','Capybara','Caribou','Camine Bee Eater','Cat','Cheetah','Chestnut Weaver','Chipmunk','Cliffchat','Coatimundi','Cobra','Comb Dunk','Crane','Crow','Coyote','Dabchick','Dama Wallaby','Dassie','Deer','Dingo','Dog','Eagle','Easter Box Turtle','Elephant','Elk','Emu','Euro Wallaby','Falcon','Fat Tailed Dunnant','Dolphin','Flamingo','Flicker','Four Spotted Skimmer','Galah','Goat','Gaur','Gazelle','Giraffe','Goose','Gorilla','Green Heron','Green Vine Snake','Gull','Harbor Seal','Hawk','Hippopotamus']

for category in CATEGORIES:
    path = os.path.join(DATADIR, category) 
    for img in os.listdir(path):
        img_array=cv2.imread(os.path.join(path,img),cv2.IMREAD_GRAYSCALE)
        plt.imshow(img_array, cmap="gray")
        plt.show()
        break 
    break     
    

IMG_SIZE=80
new_array = cv2.resize(img_array,(IMG_SIZE,IMG_SIZE))
plt.imshow(new_array,cmap='gray')
plt.show()

training_data=[]

def create_training_data():
    for category in CATEGORIES:
        path = os.path.join(DATADIR, category) 
        class_num = CATEGORIES.index(category)
        for img in os.listdir(path):
            try:
                img_array=cv2.imread(os.path.join(path,img),cv2.IMREAD_GRAYSCALE)
                new_array = cv2.resize(img_array,(IMG_SIZE,IMG_SIZE))
                training_data.append([new_array, class_num])
            except Exception as e:
                pass
        
create_training_data() 
import random
random.shuffle(training_data)


X = []
y = []
for features,label in training_data:
    X.append(features)
    y.append(label)

print(X[0].reshape(-1, IMG_SIZE, IMG_SIZE, 1))
X = np.array(X).reshape(-1, IMG_SIZE, IMG_SIZE, 1)
y = np.array(y)


import pickle

pickle_out = open("X.pickle","wb")
pickle.dump(X, pickle_out)
pickle_out.close()

pickle_out = open("y.pickle","wb")
pickle.dump(y, pickle_out)
pickle_out.close()

pickle_in = open("X.pickle","rb")
X = pickle.load(pickle_in)

pickle_in = open("y.pickle","rb")
y = pickle.load(pickle_in)

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Activation, Flatten
from tensorflow.keras.layers import Conv2D, MaxPooling2D
from keras.callbacks import TensorBoard
import pickle

pickle_in = open("X.pickle","rb")
X = pickle.load(pickle_in)

pickle_in = open("y.pickle","rb")
y = pickle.load(pickle_in)

y=np.array(y)
X = X/255

model = Sequential()

model.add(Conv2D(256, (3, 3), input_shape=X.shape[1:]))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(256, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Flatten())  

model.add(Dense(64))
model.add(Activation('relu'))

model.add(Dense(1))
model.add(Activation('sigmoid'))

model.compile(optimizer='adam',  
              loss='crossentropy',  
              metrics=['accuracy']) 

model.fit(X, y, batch_size=32, epochs=5, validation_split=0.4) 
model.save('SimranCNN.model')

val_loss, val_acc = model.evaluate(X,y)  
print(val_loss)  
print(val_acc)

